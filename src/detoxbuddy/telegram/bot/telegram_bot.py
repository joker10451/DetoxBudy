"""
–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å Telegram –±–æ—Ç–∞ –¥–ª—è DetoxBuddy
"""

import asyncio
import logging
import threading
from typing import Optional
from datetime import timedelta
from telegram import Update, BotCommand, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    ContextTypes
)
import structlog

from detoxbuddy.core.config_simple import settings, constants
from detoxbuddy.core.services.user_service import user_service
from detoxbuddy.database.models.user import User
from detoxbuddy.database.models.achievement import Achievement, UserAchievement, UserLevel, AchievementType
from detoxbuddy.database.crud.achievement import achievement_service, user_achievement_crud, user_level_crud
from detoxbuddy.core.focus_timer import FocusTimer


logger = structlog.get_logger()


class TelegramBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å Telegram –±–æ—Ç–∞"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        self.application: Optional[Application] = None
        self.token = settings.telegram_bot_token
        self.polling_thread: Optional[threading.Thread] = None
        self.focus_timer: Optional[FocusTimer] = None
        
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        if not self.token:
            logger.warning("Telegram bot token not configured, skipping bot startup")
            return
            
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            self.application = Application.builder().token(self.token).build()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FocusTimer
            self.focus_timer = FocusTimer(self)
            await self.focus_timer.start()
            
            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
            await self._setup_handlers()
            
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
            await self._setup_commands()
            
            # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
            await self.application.initialize()
            await self.application.start()
            
            logger.info("Telegram bot started successfully")
            
        except Exception as e:
            logger.error("Failed to start Telegram bot", error=str(e))
            raise
    
    async def run_polling(self):
        """–ó–∞–ø—É—Å–∫ polling"""
        if not self.application:
            logger.error("Application not initialized")
            return
            
        try:
            # –£–¥–∞–ª—è–µ–º webhook –∏ –∑–∞–ø—É—Å–∫–∞–µ–º polling
            await self.application.bot.delete_webhook()
            await self.application.updater.start_polling()
            
            # –î–µ—Ä–∂–∏–º –±–æ—Ç–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã–º
            while True:
                await asyncio.sleep(1)
        except Exception as e:
            logger.error("Polling error", error=str(e))
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        if self.focus_timer:
            await self.focus_timer.stop()
        
        if self.application:
            await self.application.stop()
            await self.application.shutdown()
            logger.info("Telegram bot stopped")
    
    async def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        if not self.application:
            return
        
        # –ö–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self._start_command))
        self.application.add_handler(CommandHandler("help", self._help_command))
        self.application.add_handler(CommandHandler("test", self._test_command))
        self.application.add_handler(CommandHandler("remind", self._remind_command))
        self.application.add_handler(CommandHandler("reminders", self._reminders_command))
        self.application.add_handler(CommandHandler("detox", self._detox_command))
        self.application.add_handler(CommandHandler("focus", self._focus_command))
        self.application.add_handler(CommandHandler("quiet", self._quiet_command))
        self.application.add_handler(CommandHandler("content", self._content_command))
        self.application.add_handler(CommandHandler("analytics", self._analytics_command))
        self.application.add_handler(CommandHandler("addtime", self._addtime_command))
        self.application.add_handler(CommandHandler("settings", self._settings_command))
        self.application.add_handler(CommandHandler("recurring", self._recurring_command))
        self.application.add_handler(CommandHandler("daily", self._daily_command))
        self.application.add_handler(CommandHandler("weekly", self._weekly_command))
        self.application.add_handler(CommandHandler("achievements", self._achievements_command))
        self.application.add_handler(CommandHandler("level", self._level_command))
        self.application.add_handler(CommandHandler("profile", self._profile_command))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback queries (inline –∫–Ω–æ–ø–∫–∏)
        self.application.add_handler(CallbackQueryHandler(self._handle_callback_query))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
        self.application.add_handler(MessageHandler(filters.COMMAND, self._unknown_command))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self._handle_text))
        
        logger.info("Telegram bot handlers setup completed")
    
    async def _setup_commands(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
        if not self.application:
            return
        
        commands = [
            BotCommand(constants.COMMAND_START, "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
            BotCommand(constants.COMMAND_HELP, "–ü–æ–º–æ—â—å"),
            BotCommand("test", "–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞"),
            BotCommand("remind", "–°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"),
            BotCommand("reminders", "–ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"),
            BotCommand("recurring", "–ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"),
            BotCommand("daily", "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"),
            BotCommand("weekly", "–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"),
            BotCommand("achievements", "–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è"),
            BotCommand("level", "–£—Ä–æ–≤–µ–Ω—å –∏ –æ–ø—ã—Ç"),
            BotCommand("profile", "–ü—Ä–æ—Ñ–∏–ª—å"),
            BotCommand(constants.COMMAND_DETOX, "–ü–ª–∞–Ω –¥–µ—Ç–æ–∫—Å–∞"),
            BotCommand(constants.COMMAND_FOCUS, "–¢–∞–π–º–µ—Ä —Ñ–æ–∫—É—Å–∞"),
            BotCommand(constants.COMMAND_QUIET, "–¢–∏—Ö–∏–µ —á–∞—Å—ã"),
            BotCommand(constants.COMMAND_CONTENT, "–ü–æ–ª–µ–∑–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç"),
            BotCommand(constants.COMMAND_ANALYTICS, "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞"),
            BotCommand("addtime", "–î–æ–±–∞–≤–∏—Ç—å –≤—Ä–µ–º—è"),
            BotCommand(constants.COMMAND_SETTINGS, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
        ]
        
        await self.application.bot.set_my_commands(commands)
        logger.info("Telegram bot commands setup completed")
    
    async def _authenticate_user(self, update: Update) -> Optional[User]:
        """
        –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Telegram.
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ –±–∞–∑–µ.
        """
        if not update.effective_user:
            return None
        
        try:
            user = user_service.authenticate_telegram_user(update.effective_user)
            if user:
                logger.info(
                    "User authenticated",
                    user_id=user.id,
                    telegram_id=user.telegram_id,
                    username=user.username
                )
            return user
        except Exception as e:
            logger.error(f"Failed to authenticate user: {e}")
            return None

    async def _start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await self._authenticate_user(update)
        if not user:
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            return
        
        telegram_user = update.effective_user
        chat_id = update.effective_chat.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–æ–≤—ã–π –ª–∏ —ç—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (—Å–æ–∑–¥–∞–Ω–Ω—ã–π –º–µ–Ω–µ–µ –º–∏–Ω—É—Ç—ã –Ω–∞–∑–∞–¥)
        from datetime import datetime, timedelta
        is_new_user = (datetime.utcnow() - user.created_at) < timedelta(minutes=1)
        
        if is_new_user:
            welcome_message = f"""
üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {settings.project_name}, {telegram_user.first_name}!

–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –¢–µ–ø–µ—Ä—å —è –ø–æ–º–æ–≥—É –≤–∞–º –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç—å –∫ —Ü–∏—Ñ—Ä–æ–≤–æ–º—É –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—é –∏ —É–ª—É—á—à–∏—Ç—å —Ü–∏—Ñ—Ä–æ–≤—É—é –≥–∏–≥–∏–µ–Ω—É.

üéØ –ß—Ç–æ —è —É–º–µ—é:
‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø–ª–∞–Ω—ã –¥–µ—Ç–æ–∫—Å–∞
‚Ä¢ –ü–æ–º–æ–≥–∞—Ç—å —Å —Ç–∞–π–º–µ—Ä–æ–º —Ñ–æ–∫—É—Å–∞ (Pomodoro)
‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ "—Ç–∏—Ö–∏—Ö —á–∞—Å–∞—Ö"
‚Ä¢ –ü—Ä–µ–¥–ª–∞–≥–∞—Ç—å –ø–æ–ª–µ–∑–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —ç–∫—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º.
            """
        else:
            welcome_message = f"""
üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user.full_name}!

–†–∞–¥ –≤–∏–¥–µ—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.
            """
        
        await context.bot.send_message(
            chat_id=chat_id,
            text=welcome_message.strip()
        )
        
        logger.info(
            "User started bot",
            user_id=user.id,
            telegram_id=telegram_user.id,
            username=telegram_user.username,
            is_new_user=is_new_user
        )
    
    async def _help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
        chat_id = update.effective_chat.id
        
        help_message = """
üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/test - –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
/remind - –°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
/reminders - –ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
/addtime - –î–æ–±–∞–≤–∏—Ç—å –≤—Ä–µ–º—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
/analytics - –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —ç–∫—Ä–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
/detox - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞–Ω–æ–º –¥–µ—Ç–æ–∫—Å–∞
/focus - –¢–∞–π–º–µ—Ä —Ñ–æ–∫—É—Å–∞ (Pomodoro)
/quiet - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∏—Ö–∏—Ö —á–∞—Å–æ–≤
/content - –ü–æ–ª–µ–∑–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è

üèÜ –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:
/achievements - –í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
/level - –£—Ä–æ–≤–µ–Ω—å –∏ –æ–ø—ã—Ç
/profile - –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

üí° –°–æ–≤–µ—Ç—ã:
‚Ä¢ /addtime 30 productivity - –¥–æ–±–∞–≤–∏—Ç—å 30 –º–∏–Ω—É—Ç —Ä–∞–±–æ—Ç—ã
‚Ä¢ /remind 15m –°–¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ—Ä—ã–≤ - —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
‚Ä¢ /analytics - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
‚Ä¢ /achievements - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        """
        
        await context.bot.send_message(
            chat_id=chat_id,
            text=help_message.strip()
        )
    
    async def _test_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /test"""
        chat_id = update.effective_chat.id
        
        await context.bot.send_message(
            chat_id=chat_id,
            text="‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç! –ë–æ—Ç DetoxBuddy —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ."
        )
    
    async def _detox_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /detox"""
        chat_id = update.effective_chat.id
        
        message = """
üßò‚Äç‚ôÄÔ∏è –ü–ª–∞–Ω –¥–µ—Ç–æ–∫—Å–∞

–ó–¥–µ—Å—å –≤—ã —Å–º–æ–∂–µ—Ç–µ:
‚Ä¢ –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –¥–µ—Ç–æ–∫—Å–∞
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

üöß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
        """
        
        await context.bot.send_message(
            chat_id=chat_id,
            text=message.strip()
        )
    
    async def _focus_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /focus"""
        # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await self._authenticate_user(update)
        if not user:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start"
            )
            return
        
        chat_id = update.effective_chat.id
        user_id = user.id
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è
            if self.focus_timer and self.focus_timer.is_user_in_session(user_id):
                session_info = self.focus_timer.get_session_info(user_id)
                if session_info:
                    await self._show_active_session_controls(update, session_info)
                    return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–∏
            await self._show_focus_session_menu(update)
            
        except Exception as e:
            logger.error(f"Error in focus command: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ç–∞–π–º–µ—Ä–æ–º —Ñ–æ–∫—É—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    
    async def _quiet_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /quiet"""
        chat_id = update.effective_chat.id
        
        message = """
üåô –¢–∏—Ö–∏–µ —á–∞—Å—ã

–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –≤—Ä–µ–º—è –¥–ª—è:
‚Ä¢ –û—Ç–¥—ã—Ö–∞ –æ—Ç –≥–∞–¥–∂–µ—Ç–æ–≤
‚Ä¢ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫–æ —Å–Ω—É
‚Ä¢ –¶–∏—Ñ—Ä–æ–≤–æ–≥–æ –¥–µ—Ç–æ–∫—Å–∞

üöß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
        """
        
        await context.bot.send_message(
            chat_id=chat_id,
            text=message.strip()
        )
    
    async def _content_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /content"""
        chat_id = update.effective_chat.id
        
        message = """
üìñ –ü–æ–ª–µ–∑–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç

–ü–æ–ª—É—á–∞–π—Ç–µ:
‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ –æ —Ü–∏—Ñ—Ä–æ–≤–æ–π –≥–∏–≥–∏–µ–Ω–µ
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—é
‚Ä¢ –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç

üöß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
        """
        
        await context.bot.send_message(
            chat_id=chat_id,
            text=message.strip()
        )
    
    async def _analytics_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /analytics - –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —ç–∫—Ä–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
        # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await self._authenticate_user(update)
        if not user:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start"
            )
            return
        
        chat_id = update.effective_chat.id
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É
            from detoxbuddy.core.services.screen_time_service import ScreenTimeService
            from detoxbuddy.database.database import SessionLocal
            
            with SessionLocal() as db:
                screen_time_service = ScreenTimeService(db)
                insights = screen_time_service.get_user_insights(user.id)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π
            message = self._format_analytics_message(insights)
            
        except Exception as e:
            logger.error(f"Error getting analytics: {e}")
            message = """
üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —ç–∫—Ä–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏

‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.
–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ –≤—Ä–µ–º–µ–Ω–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.

üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:
‚Ä¢ /addtime 30 productivity - –¥–æ–±–∞–≤–∏—Ç—å 30 –º–∏–Ω—É—Ç –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
‚Ä¢ /addtime 60 social - –¥–æ–±–∞–≤–∏—Ç—å 1 —á–∞—Å –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö
‚Ä¢ /addtime 45 entertainment - –¥–æ–±–∞–≤–∏—Ç—å 45 –º–∏–Ω—É—Ç —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–π
            """
        
        # –°–æ–∑–¥–∞–µ–º inline –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        keyboard = [
            [
                InlineKeyboardButton("üìà –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç", callback_data="analytics_detailed"),
                InlineKeyboardButton("üìä –¢—Ä–µ–Ω–¥—ã", callback_data="analytics_trends")
            ],
            [
                InlineKeyboardButton("üéØ –¶–µ–ª–∏", callback_data="analytics_goals"),
                InlineKeyboardButton("üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è", callback_data="analytics_achievements")
            ],
            [
                InlineKeyboardButton("‚è∞ –î–æ–±–∞–≤–∏—Ç—å –≤—Ä–µ–º—è", callback_data="add_time_quick")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await context.bot.send_message(
            chat_id=chat_id,
            text=message.strip(),
            reply_markup=reply_markup
        )
    
    async def _remind_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /remind - —Å–æ–∑–¥–∞–Ω–∏–µ –±—ã—Å—Ç—Ä–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
        # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await self._authenticate_user(update)
        if not user:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start"
            )
            return
        
        chat_id = update.effective_chat.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        args = context.args
        if len(args) < 1:
            message = """
üîî –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /remind <–≤—Ä–µ–º—è> <—Ç–µ–∫—Å—Ç> [repeat]

–ü—Ä–∏–º–µ—Ä—ã:
‚Ä¢ /remind 15m –°–¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ—Ä—ã–≤
‚Ä¢ /remind 1h –ü–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ
‚Ä¢ /remind 30m –í—ã–ø–∏—Ç—å –≤–æ–¥—ã repeat
‚Ä¢ /remind 2h –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—á—Ç—É repeat

–í—Ä–µ–º—è –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
‚Ä¢ 15m - 15 –º–∏–Ω—É—Ç
‚Ä¢ 1h - 1 —á–∞—Å
‚Ä¢ 2h30m - 2 —á–∞—Å–∞ 30 –º–∏–Ω—É—Ç

–î–æ–±–∞–≤—å—Ç–µ "repeat" –≤ –∫–æ–Ω—Ü–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–≥–æ—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            """
        else:
            try:
                # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
                time_str = args[0]
                remaining_args = args[1:] if len(args) > 1 else []
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–ª–∞–≥ repeat
                is_recurring = False
                if remaining_args and remaining_args[-1].lower() == "repeat":
                    is_recurring = True
                    remaining_args = remaining_args[:-1]  # –£–±–∏—Ä–∞–µ–º "repeat"
                
                text = " ".join(remaining_args) if remaining_args else "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"
                
                # –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–µ—Ä –≤—Ä–µ–º–µ–Ω–∏
                delay_minutes = self._parse_time_string(time_str)
                if delay_minutes <= 0:
                    raise ValueError("–í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
                
                # –°–æ–∑–¥–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                from detoxbuddy.database.crud.reminder import reminder_crud
                from detoxbuddy.database.database import SessionLocal
                from detoxbuddy.database.models.reminder import ReminderType
                
                with SessionLocal() as db:
                    if is_recurring:
                        # –°–æ–∑–¥–∞–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                        from datetime import datetime, timedelta
                        start_time = datetime.now() + timedelta(minutes=delay_minutes)
                        
                        reminder = reminder_crud.create_recurring_reminder(
                            db=db,
                            user_id=user.id,
                            title=text,
                            message=text,
                            reminder_type=ReminderType.CUSTOM,
                            repeat_interval=delay_minutes,
                            start_time=start_time
                        )
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
                        from detoxbuddy.core.reminder_scheduler import add_reminder_to_scheduler
                        add_reminder_to_scheduler(reminder)
                        
                        message = f"""
‚úÖ –ü–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!

üìù –¢–µ–∫—Å—Ç: {text}
‚è∞ –ü–µ—Ä–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —á–µ—Ä–µ–∑ {self._format_time(delay_minutes)}
üîÑ –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ: –∫–∞–∂–¥—ã–µ {self._format_time(delay_minutes)}
üÜî ID: {reminder.id}

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /recurring –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–º–∏—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏.
                        """
                    else:
                        # –°–æ–∑–¥–∞–µ–º –æ–±—ã—á–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                        reminder = reminder_crud.create_quick_reminder(
                            db=db,
                            user_id=user.id,
                            title=text,
                            message=text,
                            delay_minutes=delay_minutes,
                            reminder_type=ReminderType.CUSTOM
                        )
                        
                        message = f"""
‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!

üìù –¢–µ–∫—Å—Ç: {text}
‚è∞ –í—Ä–µ–º—è: —á–µ—Ä–µ–∑ {self._format_time(delay_minutes)}
üÜî ID: {reminder.id}

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reminders –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.
                        """
                
            except ValueError as e:
                message = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /remind –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏."
            except Exception as e:
                logger.error(f"Error creating reminder: {e}")
                message = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        
        await context.bot.send_message(
            chat_id=chat_id,
            text=message.strip()
        )
    
    async def _reminders_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /reminders - –ø—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await self._authenticate_user(update)
        if not user:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start"
            )
            return
        
        chat_id = update.effective_chat.id
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            from detoxbuddy.database.crud.reminder import reminder_crud
            from detoxbuddy.database.database import SessionLocal
            
            with SessionLocal() as db:
                reminders = reminder_crud.get_reminders_for_telegram_bot(db, user_id=user.id, limit=10)
            
            if not reminders:
                message = """
üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π

–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π:
/remind 15m –°–¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ—Ä—ã–≤
                """
                
                # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                keyboard = [
                    [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", callback_data="create_reminder")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
            else:
                message = "üìù –í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n\n"
                
                for reminder in reminders:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ —Å—Ç–∞—Ç—É—Å–∞
                    status_emoji = {
                        "active": "üü¢",
                        "sent": "‚úÖ",
                        "cancelled": "‚ùå",
                        "expired": "‚è∞"
                    }.get(reminder.status.value, "üîî")
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ —Ç–∏–ø–∞
                    type_emoji = {
                        "daily": "üìÖ",
                        "weekly": "üìÜ",
                        "custom": "‚öôÔ∏è",
                        "detox_reminder": "üßò",
                        "focus_reminder": "üéØ",
                        "break_reminder": "‚òï",
                        "quiet_hours": "ü§´"
                    }.get(reminder.reminder_type.value, "üîî")
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
                    scheduled_time = reminder.scheduled_time.strftime("%d.%m %H:%M")
                    
                    message += f"{status_emoji} {type_emoji} {reminder.title}\n"
                    message += f"   ‚è∞ {scheduled_time} | ID: {reminder.id}\n"
                    if reminder.message and reminder.message != "None":
                        message += f"   üìù {reminder.message[:50]}{'...' if len(reminder.message) > 50 else ''}\n"
                    message += "\n"
                
                # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏
                keyboard = [
                    [
                        InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å", callback_data="create_reminder"),
                        InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_reminders")
                    ],
                    [
                        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ", callback_data="cancel_all_reminders"),
                        InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="reminders_stats")
                    ]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
        
        except Exception as e:
            logger.error(f"Error getting reminders: {e}")
            message = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            reply_markup = None
        
        await context.bot.send_message(
            chat_id=chat_id,
            text=message.strip(),
            reply_markup=reply_markup
        )
    
    def _parse_time_string(self, time_str: str) -> int:
        """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –≤—Ä–µ–º–µ–Ω–∏ –≤ –º–∏–Ω—É—Ç—ã"""
        time_str = time_str.lower().strip()
        total_minutes = 0
        
        # –ü–∞—Ä—Å–∏–º —á–∞—Å—ã
        if 'h' in time_str:
            parts = time_str.split('h')
            if len(parts) == 2:
                try:
                    hours = int(parts[0])
                    total_minutes += hours * 60
                    time_str = parts[1]
                except ValueError:
                    raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏")
        
        # –ü–∞—Ä—Å–∏–º –º–∏–Ω—É—Ç—ã
        if 'm' in time_str:
            parts = time_str.split('m')
            if len(parts) >= 1:
                try:
                    minutes = int(parts[0])
                    total_minutes += minutes
                except ValueError:
                    raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏")
        
        return total_minutes
    
    def _format_time(self, minutes: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –º–∏–Ω—É—Ç—ã –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
        if minutes < 60:
            return f"{minutes} –º–∏–Ω"
        else:
            hours = minutes // 60
            mins = minutes % 60
            if mins == 0:
                return f"{hours} —á"
            else:
                return f"{hours} —á {mins} –º–∏–Ω"
    
    async def _settings_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /settings"""
        # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await self._authenticate_user(update)
        if not user:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start"
            )
            return
        
        chat_id = update.effective_chat.id
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        settings_dict = user_service.get_user_settings_by_telegram_id(user.telegram_id)
        
        if settings_dict:
            settings_text = f"""
‚öôÔ∏è –í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:

üë§ –ü—Ä–æ—Ñ–∏–ª—å:
‚Ä¢ –ò–º—è: {user.full_name}
‚Ä¢ Telegram ID: {user.telegram_id}
‚Ä¢ –ü—Ä–µ–º–∏—É–º: {"–î–∞" if user.is_premium else "–ù–µ—Ç"}

üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:
‚Ä¢ –í–∫–ª—é—á–µ–Ω—ã: {"–î–∞" if settings_dict['notifications_enabled'] else "–ù–µ—Ç"}
‚Ä¢ –Ø–∑—ã–∫: {settings_dict['language']}
‚Ä¢ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {settings_dict['timezone']}

‚è±Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–æ–∫—É—Å–∞:
‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ñ–æ–∫—É—Å–∞: {settings_dict['default_focus_duration']} –º–∏–Ω
‚Ä¢ –ö–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä–µ—Ä—ã–≤: {settings_dict['default_break_duration']} –º–∏–Ω
‚Ä¢ –î–ª–∏–Ω–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤: {settings_dict['long_break_duration']} –º–∏–Ω

ü§´ –¢–∏—Ö–∏–µ —á–∞—Å—ã:
‚Ä¢ –í–∫–ª—é—á–µ–Ω—ã: {"–î–∞" if settings_dict['quiet_hours_enabled'] else "–ù–µ—Ç"}
"""
            if settings_dict['quiet_hours_enabled']:
                if settings_dict['quiet_hours_start'] and settings_dict['quiet_hours_end']:
                    settings_text += f"‚Ä¢ –í—Ä–µ–º—è: {settings_dict['quiet_hours_start']} - {settings_dict['quiet_hours_end']}\n"

            settings_text += "\nüí° –ü–æ–ª–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ."
        else:
            settings_text = """
‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏

–£–ø—Ä–∞–≤–ª—è–π—Ç–µ:
‚Ä¢ –ü—Ä–æ—Ñ–∏–ª–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
‚Ä¢ –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞

üöß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
            """
        
        await context.bot.send_message(
            chat_id=chat_id,
            text=settings_text.strip()
        )
    
    async def _unknown_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
        chat_id = update.effective_chat.id
        
        message = """
‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.
        """
        
        await context.bot.send_message(
            chat_id=chat_id,
            text=message.strip()
        )
    
    async def _addtime_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /addtime - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
        # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await self._authenticate_user(update)
        if not user:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start"
            )
            return
        
        chat_id = update.effective_chat.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        args = context.args
        if len(args) < 2:
            message = """
‚è±Ô∏è –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addtime <–º–∏–Ω—É—Ç—ã> <—Ç–∏–ø_–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏>

–ü—Ä–∏–º–µ—Ä—ã:
‚Ä¢ /addtime 30 productivity - –¥–æ–±–∞–≤–∏—Ç—å 30 –º–∏–Ω—É—Ç –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
‚Ä¢ /addtime 60 social - –¥–æ–±–∞–≤–∏—Ç—å 1 —á–∞—Å –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö
‚Ä¢ /addtime 45 entertainment - –¥–æ–±–∞–≤–∏—Ç—å 45 –º–∏–Ω—É—Ç —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–π
‚Ä¢ /addtime 20 other - –¥–æ–±–∞–≤–∏—Ç—å 20 –º–∏–Ω—É—Ç –¥—Ä—É–≥–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏

–¢–∏–ø—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:
‚Ä¢ productivity - –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è (—Ä–∞–±–æ—Ç–∞, —É—á–µ–±–∞)
‚Ä¢ social - —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏
‚Ä¢ entertainment - —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è (–∏–≥—Ä—ã, –≤–∏–¥–µ–æ)
‚Ä¢ other - –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è
            """
        else:
            try:
                # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
                minutes = int(args[0])
                activity_type = args[1].lower()
                
                if minutes <= 0 or minutes > 1440:  # –ú–∞–∫—Å–∏–º—É–º 24 —á–∞—Å–∞
                    raise ValueError("–í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 1440 –º–∏–Ω—É—Ç")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                valid_types = ['productivity', 'social', 'entertainment', 'other']
                if activity_type not in valid_types:
                    raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. –î–æ—Å—Ç—É–ø–Ω—ã–µ: {', '.join(valid_types)}")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è
                from detoxbuddy.core.services.screen_time_service import ScreenTimeService
                from detoxbuddy.database.schemas.screen_time import QuickScreenTimeEntry
                from detoxbuddy.database.database import SessionLocal
                
                with SessionLocal() as db:
                    screen_time_service = ScreenTimeService(db)
                    quick_entry = QuickScreenTimeEntry(
                        minutes=minutes,
                        activity_type=activity_type
                    )
                    screen_time = screen_time_service.create_quick_entry(user.id, quick_entry)
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–∏–ø –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                activity_names = {
                    'productivity': '–ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è',
                    'social': '—Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏',
                    'entertainment': '—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è',
                    'other': '–¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è'
                }
                
                message = f"""
‚úÖ –í—Ä–µ–º—è –¥–æ–±–∞–≤–ª–µ–Ω–æ!

‚è±Ô∏è {self._format_time(minutes)} {activity_names[activity_type]}
üìÖ –î–∞—Ç–∞: {screen_time.date.strftime('%d.%m.%Y')}
üìä –í—Å–µ–≥–æ –∑–∞ –¥–µ–Ω—å: {self._format_time(screen_time.total_minutes)}

üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /analytics –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.
                """
                
            except ValueError as e:
                message = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /addtime –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏."
            except Exception as e:
                logger.error(f"Error adding screen time: {e}")
                message = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        
        await context.bot.send_message(
            chat_id=chat_id,
            text=message.strip()
        )
    
    async def _safe_edit_message(self, query, text: str, reply_markup=None):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
        try:
            current_text = query.message.text
            current_reply_markup = query.message.reply_markup
            new_text = text.strip()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç–µ –∏ reply_markup
            text_changed = current_text != new_text
            markup_changed = self._compare_reply_markup(current_reply_markup, reply_markup)
            
            if text_changed or markup_changed:
                await query.edit_message_text(
                    text=new_text,
                    reply_markup=reply_markup
                )
            else:
                # –ï—Å–ª–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
                await query.answer("üìä –î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã")
                
        except Exception as e:
            logger.error(f"Error editing message: {e}")
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ "Message is not modified"
            if "Message is not modified" in str(e):
                await query.answer("üìä –î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã")
            else:
                # –ï—Å–ª–∏ —ç—Ç–æ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞, –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                try:
                    await query.message.reply_text(
                        text=text.strip(),
                        reply_markup=reply_markup
                    )
                except Exception as reply_error:
                    logger.error(f"Error sending new message: {reply_error}")
                    await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
    
    def _compare_reply_markup(self, current_markup, new_markup):
        """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –¥–≤–∞ reply_markup –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
        if current_markup is None and new_markup is None:
            return False
        if current_markup is None or new_markup is None:
            return True
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É inline_keyboard
        current_keyboard = current_markup.inline_keyboard if hasattr(current_markup, 'inline_keyboard') else []
        new_keyboard = new_markup.inline_keyboard if hasattr(new_markup, 'inline_keyboard') else []
        
        if len(current_keyboard) != len(new_keyboard):
            return True
        
        for i, current_row in enumerate(current_keyboard):
            new_row = new_keyboard[i]
            if len(current_row) != len(new_row):
                return True
            
            for j, current_button in enumerate(current_row):
                new_button = new_row[j]
                if (current_button.text != new_button.text or 
                    current_button.callback_data != new_button.callback_data):
                    return True
        
        return False

    def _format_analytics_message(self, insights: dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π"""
        today = insights.get("today", {})
        this_week = insights.get("this_week", {})
        trends = insights.get("trends", {})
        goals = insights.get("goals", {})
        achievements = insights.get("achievements", [])
        
        message = "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —ç–∫—Ä–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏\n\n"
        
        # –°–µ–≥–æ–¥–Ω—è
        message += "üìÖ –°–ï–ì–û–î–ù–Ø:\n"
        if today.get("total_minutes", 0) > 0:
            message += f"‚è±Ô∏è –í—Å–µ–≥–æ: {self._format_time(today['total_minutes'])}\n"
            message += f"üíº –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {today['productivity_percentage']:.1f}%\n"
            message += f"üì± –°–æ—Ü—Å–µ—Ç–∏: {today['social_media_percentage']:.1f}%\n"
            message += f"üéÆ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è: {today.get('entertainment_percentage', 0):.1f}%\n"
            message += f"üìä –î—Ä—É–≥–æ–µ: {today.get('other_percentage', 0):.1f}%\n"
        else:
            message += "üìù –î–∞–Ω–Ω—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è –ø–æ–∫–∞ –Ω–µ—Ç\n"
        
        message += "\nüìà –≠–¢–ê –ù–ï–î–ï–õ–Ø:\n"
        if this_week.get("total_minutes", 0) > 0:
            message += f"‚è±Ô∏è –í—Å–µ–≥–æ: {self._format_time(this_week['total_minutes'])}\n"
            message += f"üìä –í —Å—Ä–µ–¥–Ω–µ–º: {self._format_time(int(this_week['average_daily_minutes']))} –≤ –¥–µ–Ω—å\n"
            message += f"üíº –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {this_week['productivity_percentage']:.1f}%\n"
            message += f"üì± –°–æ—Ü—Å–µ—Ç–∏: {this_week['social_media_percentage']:.1f}%\n"
            message += f"üéØ –°–æ–±–ª—é–¥–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤: {this_week['limit_compliance']:.1f}%\n"
        else:
            message += "üìù –î–∞–Ω–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é –ø–æ–∫–∞ –Ω–µ—Ç\n"
        
        # –¢—Ä–µ–Ω–¥—ã
        if trends.get("trend_direction") and trends["trend_direction"] != "–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö":
            message += f"\nüìà –¢–†–ï–ù–î: {trends['trend_direction']} –Ω–∞ {trends['trend_percentage']:.1f}%\n"
        
        # –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        if achievements:
            message += "\nüèÜ –î–û–°–¢–ò–ñ–ï–ù–ò–Ø:\n"
            for achievement in achievements[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3
                message += f"{achievement['icon']} {achievement['title']}\n"
                message += f"   {achievement['description']}\n"
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if today.get("recommendations"):
            message += "\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:\n"
            for rec in today["recommendations"][:2]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 2
                message += f"‚Ä¢ {rec}\n"
        
        message += "\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /addtime –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –≤—Ä–µ–º–µ–Ω–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è."
        
        return message
    
    async def _handle_callback_query(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback queries –æ—Ç inline –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
        
        # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await self._authenticate_user(update)
        if not user:
            await query.edit_message_text(
                text="‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start"
            )
            return
        
        try:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã callback_data
            if query.data == "create_reminder":
                await self._handle_create_reminder_callback(query, context)
            elif query.data == "refresh_reminders":
                await self._handle_refresh_reminders_callback(query, context, user)
            elif query.data == "cancel_all_reminders":
                await self._handle_cancel_all_reminders_callback(query, context, user)
            elif query.data == "reminders_stats":
                await self._handle_reminders_stats_callback(query, context, user)
            elif query.data.startswith("delete_reminder_"):
                reminder_id = int(query.data.split("_")[2])
                await self._handle_delete_reminder_callback(query, context, user, reminder_id)
            elif query.data.startswith("analytics_"):
                await self._handle_analytics_callback(query, context, user)
            elif query.data == "add_time_quick":
                await self._handle_add_time_quick_callback(query, context)
            elif query.data.startswith("recurring_"):
                await self._handle_recurring_callback(query, context, user)
            elif query.data.startswith("focus_"):
                # –°–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤—ã–π update –¥–ª—è focus callback
                fake_update = type('Update', (), {'callback_query': query, 'effective_user': update.effective_user})()
                await self._handle_focus_callback(fake_update, context)
            elif query.data.startswith("achievements_"):
                action = query.data.split("_", 1)[1]
                await self._handle_achievement_callback(query, user.id, action)
            elif query.data == "achievements_main":
                await self._achievements_command(update, context)
            elif query.data == "level_main":
                await self._level_command(update, context)
            elif query.data.startswith("level_"):
                action = query.data.split("_", 1)[1]
                await self._handle_level_callback(query, user.id, action)
            elif query.data == "main_menu":
                await self._start_command(update, context)
            elif query.data == "focus_back":
                await self._focus_command(update, context)
            elif query.data == "analytics_refresh":
                await self._analytics_command(update, context)
            elif query.data == "recurring_refresh":
                await self._recurring_command(update, context)
            else:
                await query.edit_message_text(
                    text="‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                )
                
        except Exception as e:
            logger.error(f"Error handling callback query: {e}")
            await query.edit_message_text(
                text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    
    async def _handle_create_reminder_callback(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É"""
        message = """
üîî –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:
/remind <–≤—Ä–µ–º—è> <—Ç–µ–∫—Å—Ç>

–ü—Ä–∏–º–µ—Ä—ã:
‚Ä¢ /remind 15m –°–¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ—Ä—ã–≤
‚Ä¢ /remind 1h –ü–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ
‚Ä¢ /remind 30m –í—ã–ø–∏—Ç—å –≤–æ–¥—ã

–í—Ä–µ–º—è –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
‚Ä¢ 15m - 15 –º–∏–Ω—É—Ç
‚Ä¢ 1h - 1 —á–∞—Å
‚Ä¢ 2h30m - 2 —á–∞—Å–∞ 30 –º–∏–Ω—É—Ç
        """
        
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º", callback_data="refresh_reminders")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text=message.strip(),
            reply_markup=reply_markup
        )
    
    async def _handle_refresh_reminders_callback(self, query, context, user):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        try:
            from detoxbuddy.database.crud.reminder import reminder_crud
            from detoxbuddy.database.database import SessionLocal
            
            with SessionLocal() as db:
                reminders = reminder_crud.get_reminders_for_telegram_bot(db, user_id=user.id, limit=10)
            
            if not reminders:
                message = """
üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π

–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π:
/remind 15m –°–¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ—Ä—ã–≤
                """
                
                keyboard = [
                    [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", callback_data="create_reminder")]
                ]
            else:
                message = "üìù –í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n\n"
                
                for reminder in reminders:
                    status_emoji = {
                        "active": "üü¢",
                        "sent": "‚úÖ",
                        "cancelled": "‚ùå",
                        "expired": "‚è∞"
                    }.get(reminder.status.value, "üîî")
                    
                    type_emoji = {
                        "daily": "üìÖ",
                        "weekly": "üìÜ",
                        "custom": "‚öôÔ∏è",
                        "detox_reminder": "üßò",
                        "focus_reminder": "üéØ",
                        "break_reminder": "‚òï",
                        "quiet_hours": "ü§´"
                    }.get(reminder.reminder_type.value, "üîî")
                    
                    scheduled_time = reminder.scheduled_time.strftime("%d.%m %H:%M")
                    
                    message += f"{status_emoji} {type_emoji} {reminder.title}\n"
                    message += f"   ‚è∞ {scheduled_time} | ID: {reminder.id}\n"
                    if reminder.message and reminder.message != "None":
                        message += f"   üìù {reminder.message[:50]}{'...' if len(reminder.message) > 50 else ''}\n"
                    message += "\n"
                
                keyboard = [
                    [
                        InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å", callback_data="create_reminder"),
                        InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_reminders")
                    ],
                    [
                        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ", callback_data="cancel_all_reminders"),
                        InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="reminders_stats")
                    ]
                ]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(
                text=message.strip(),
                reply_markup=reply_markup
            )
            
        except Exception as e:
            logger.error(f"Error refreshing reminders: {e}")
            await query.edit_message_text(
                text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    
    async def _handle_cancel_all_reminders_callback(self, query, context, user):
        """–û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        try:
            from detoxbuddy.database.crud.reminder import reminder_crud
            from detoxbuddy.database.database import SessionLocal
            
            with SessionLocal() as db:
                cancelled_count = reminder_crud.cancel_all_active_reminders(db, user_id=user.id)
            
            message = f"""
‚úÖ –û—Ç–º–µ–Ω–µ–Ω–æ {cancelled_count} –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π

–í—Å–µ –≤–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –±—ã–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã.
            """
            
            keyboard = [
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º", callback_data="refresh_reminders")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                text=message.strip(),
                reply_markup=reply_markup
            )
            
        except Exception as e:
            logger.error(f"Error cancelling reminders: {e}")
            await query.edit_message_text(
                text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    
    async def _handle_reminders_stats_callback(self, query, context, user):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        try:
            from detoxbuddy.database.crud.reminder import reminder_crud
            from detoxbuddy.database.database import SessionLocal
            
            with SessionLocal() as db:
                stats = reminder_crud.get_reminders_stats(db, user_id=user.id)
            
            message = f"""
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π

üìÖ –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ: {stats['total']}
üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['active']}
‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {stats['sent']}
‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ: {stats['cancelled']}
‚è∞ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ: {stats['expired']}

üìà –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π: {stats['last_7_days']}
            """
            
            keyboard = [
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º", callback_data="refresh_reminders")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                text=message.strip(),
                reply_markup=reply_markup
            )
            
        except Exception as e:
            logger.error(f"Error getting reminders stats: {e}")
            await query.edit_message_text(
                text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    
    async def _handle_delete_reminder_callback(self, query, context, user, reminder_id):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
        try:
            from detoxbuddy.database.crud.reminder import reminder_crud
            from detoxbuddy.database.database import SessionLocal
            
            with SessionLocal() as db:
                reminder = reminder_crud.get(db, id=reminder_id)
                if reminder and reminder.user_id == user.id:
                    reminder_crud.remove(db, id=reminder_id)
                    message = f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ '{reminder.title}' —É–¥–∞–ª–µ–Ω–æ"
                else:
                    message = "‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è"
            
            keyboard = [
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º", callback_data="refresh_reminders")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                text=message,
                reply_markup=reply_markup
            )
            
        except Exception as e:
            logger.error(f"Error deleting reminder: {e}")
            await query.edit_message_text(
                text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    
    async def _handle_analytics_callback(self, query, context, user):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback queries –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        try:
            action = query.data.split("_")[1]  # analytics_detailed -> detailed
            
            if action == "detailed":
                await self._handle_detailed_analytics_callback(query, context, user)
            elif action == "trends":
                await self._handle_trends_analytics_callback(query, context, user)
            elif action == "goals":
                await self._handle_goals_analytics_callback(query, context, user)
            elif action == "achievements":
                await self._handle_achievements_analytics_callback(query, context, user)
            elif action == "refresh":
                await self._handle_refresh_analytics_callback(query, context, user)
            else:
                await query.edit_message_text(
                    text="‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                )
                
        except Exception as e:
            logger.error(f"Error handling analytics callback: {e}")
            await query.edit_message_text(
                text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    
    async def _handle_detailed_analytics_callback(self, query, context, user):
        """–î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        try:
            from detoxbuddy.core.services.screen_time_service import ScreenTimeService
            from detoxbuddy.database.database import SessionLocal
            
            with SessionLocal() as db:
                screen_time_service = ScreenTimeService(db)
                insights = screen_time_service.get_user_insights(user.id)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
            message = "üìä –î–ï–¢–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢\n\n"
            
            today = insights.get("today", {})
            if today.get("total_minutes", 0) > 0:
                message += "üìÖ –°–ï–ì–û–î–ù–Ø:\n"
                message += f"‚è±Ô∏è –í—Å–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏: {self._format_time(today['total_minutes'])}\n"
                message += f"üíº –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {today['productivity_percentage']:.1f}%\n"
                message += f"üì± –°–æ—Ü—Å–µ—Ç–∏: {today['social_media_percentage']:.1f}%\n"
                message += f"üéÆ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è: {today.get('entertainment_percentage', 0):.1f}%\n"
                message += f"üìä –î—Ä—É–≥–æ–µ: {today.get('other_percentage', 0):.1f}%\n\n"
            
            this_week = insights.get("this_week", {})
            if this_week.get("total_minutes", 0) > 0:
                message += "üìà –≠–¢–ê –ù–ï–î–ï–õ–Ø:\n"
                message += f"‚è±Ô∏è –í—Å–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏: {self._format_time(this_week['total_minutes'])}\n"
                message += f"üìä –í —Å—Ä–µ–¥–Ω–µ–º: {self._format_time(int(this_week['average_daily_minutes']))} –≤ –¥–µ–Ω—å\n"
                message += f"üíº –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {this_week['productivity_percentage']:.1f}%\n"
                message += f"üì± –°–æ—Ü—Å–µ—Ç–∏: {this_week['social_media_percentage']:.1f}%\n"
                message += f"üéØ –°–æ–±–ª—é–¥–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤: {this_week['limit_compliance']:.1f}%\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            if today.get("recommendations"):
                message += "üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:\n"
                for rec in today["recommendations"][:3]:
                    message += f"‚Ä¢ {rec}\n"
            
            keyboard = [
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ", callback_data="analytics_refresh")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await self._safe_edit_message(query, message, reply_markup)
            
        except Exception as e:
            logger.error(f"Error getting detailed analytics: {e}")
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    async def _handle_trends_analytics_callback(self, query, context, user):
        """–¢—Ä–µ–Ω–¥—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        try:
            from detoxbuddy.core.services.screen_time_service import ScreenTimeService
            from detoxbuddy.database.database import SessionLocal
            
            with SessionLocal() as db:
                screen_time_service = ScreenTimeService(db)
                insights = screen_time_service.get_user_insights(user.id)
            
            trends = insights.get("trends", {})
            
            message = "üìà –¢–†–ï–ù–î–´ –ò–ó–ú–ï–ù–ï–ù–ò–ô\n\n"
            
            if trends.get("trend_direction") and trends["trend_direction"] != "–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö":
                message += f"üìä –û–±—â–∏–π —Ç—Ä–µ–Ω–¥: {trends['trend_direction']} –Ω–∞ {trends['trend_percentage']:.1f}%\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–Ω–¥–∞—Ö –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            message += "üì± –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú:\n"
            message += "‚Ä¢ –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: —Å—Ç–∞–±–∏–ª—å–Ω–æ\n"
            message += "‚Ä¢ –°–æ—Ü—Å–µ—Ç–∏: –Ω–µ–±–æ–ª—å—à–æ–π —Ä–æ—Å—Ç\n"
            message += "‚Ä¢ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è: —Å–Ω–∏–∂–µ–Ω–∏–µ\n\n"
            
            message += "üéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:\n"
            message += "‚Ä¢ –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å–Ω–∏–∂–∞—Ç—å –≤—Ä–µ–º—è –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö\n"
            message += "‚Ä¢ –£–≤–µ–ª–∏—á—å—Ç–µ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è\n"
            message += "‚Ä¢ –î–µ–ª–∞–π—Ç–µ –±–æ–ª—å—à–µ –ø–µ—Ä–µ—Ä—ã–≤–æ–≤\n"
            
            keyboard = [
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ", callback_data="analytics_refresh")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await self._safe_edit_message(query, message, reply_markup)
            
        except Exception as e:
            logger.error(f"Error getting trends analytics: {e}")
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–µ–Ω–¥–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    async def _handle_goals_analytics_callback(self, query, context, user):
        """–¶–µ–ª–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        try:
            message = "üéØ –¶–ï–õ–ò –ò –î–û–°–¢–ò–ñ–ï–ù–ò–Ø\n\n"
            
            message += "üìä –¢–ï–ö–£–©–ò–ï –¶–ï–õ–ò:\n"
            message += "‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 4 —á–∞—Å–∞ —ç–∫—Ä–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –¥–µ–Ω—å\n"
            message += "‚Ä¢ –ú–∏–Ω–∏–º—É–º 60% –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏\n"
            message += "‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 30 –º–∏–Ω—É—Ç –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö\n\n"
            
            message += "‚úÖ –í–´–ü–û–õ–ù–ï–ù–ò–ï:\n"
            message += "‚Ä¢ –≠–∫—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è: 3—á 45–º / 4—á (94%)\n"
            message += "‚Ä¢ –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: 65% / 60% (‚úÖ)\n"
            message += "‚Ä¢ –°–æ—Ü—Å–µ—Ç–∏: 25–º / 30–º (‚úÖ)\n\n"
            
            message += "üèÜ –ü–†–û–ì–†–ï–°–°:\n"
            message += "‚Ä¢ –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: 85%\n"
            message += "‚Ä¢ –î–Ω–µ–π –ø–æ–¥—Ä—è–¥: 7\n"
            message += "‚Ä¢ –õ—É—á—à–∏–π –¥–µ–Ω—å: –≤—á–µ—Ä–∞\n"
            
            keyboard = [
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ", callback_data="analytics_refresh")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await self._safe_edit_message(query, message, reply_markup)
            
        except Exception as e:
            logger.error(f"Error getting goals analytics: {e}")
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–ª–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    async def _handle_achievements_analytics_callback(self, query, context, user):
        """–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        try:
            from detoxbuddy.core.services.screen_time_service import ScreenTimeService
            from detoxbuddy.database.database import SessionLocal
            
            with SessionLocal() as db:
                screen_time_service = ScreenTimeService(db)
                insights = screen_time_service.get_user_insights(user.id)
            
            achievements = insights.get("achievements", [])
            
            message = "üèÜ –î–û–°–¢–ò–ñ–ï–ù–ò–Ø\n\n"
            
            if achievements:
                for i, achievement in enumerate(achievements[:5], 1):
                    message += f"{i}. {achievement['icon']} {achievement['title']}\n"
                    message += f"   {achievement['description']}\n\n"
            else:
                message += "üéØ –ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π\n\n"
                message += "üí° –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:\n"
                message += "‚Ä¢ –î–æ–±–∞–≤–ª—è–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ –≤—Ä–µ–º–µ–Ω–∏\n"
                message += "‚Ä¢ –°–æ–±–ª—é–¥–∞–π—Ç–µ –ª–∏–º–∏—Ç—ã\n"
                message += "‚Ä¢ –£–≤–µ–ª–∏—á–∏–≤–∞–π—Ç–µ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å\n"
            
            keyboard = [
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ", callback_data="analytics_refresh")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await self._safe_edit_message(query, message, reply_markup)
            
        except Exception as e:
            logger.error(f"Error getting achievements analytics: {e}")
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    async def _handle_refresh_analytics_callback(self, query, context, user):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        try:
            from detoxbuddy.core.services.screen_time_service import ScreenTimeService
            from detoxbuddy.database.database import SessionLocal
            
            with SessionLocal() as db:
                screen_time_service = ScreenTimeService(db)
                insights = screen_time_service.get_user_insights(user.id)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π
            message = self._format_analytics_message(insights)
            
            # –î–æ–±–∞–≤–ª—è–µ–º inline –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
            keyboard = [
                [
                    InlineKeyboardButton("üìä –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç", callback_data="analytics_detailed"),
                    InlineKeyboardButton("üìà –¢—Ä–µ–Ω–¥—ã", callback_data="analytics_trends")
                ],
                [
                    InlineKeyboardButton("üéØ –¶–µ–ª–∏", callback_data="analytics_goals"),
                    InlineKeyboardButton("üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è", callback_data="analytics_achievements")
                ],
                [
                    InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤—Ä–µ–º—è", callback_data="add_time_quick"),
                    InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="analytics_refresh")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            await self._safe_edit_message(query, message, reply_markup)
            
        except Exception as e:
            logger.error(f"Error refreshing analytics: {e}")
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ "Message is not modified"
            if "Message is not modified" in str(e):
                await query.answer("üìä –î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã")
            else:
                await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    async def _handle_recurring_callback(self, query, context, user):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback queries –¥–ª—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        try:
            if query.data == "recurring_daily":
                await self._handle_recurring_daily_callback(query, context)
            elif query.data == "recurring_weekly":
                await self._handle_recurring_weekly_callback(query, context)
            elif query.data == "recurring_settings":
                await self._handle_recurring_settings_callback(query, context, user)
            elif query.data == "recurring_stats":
                await self._handle_recurring_stats_callback(query, context, user)
            elif query.data == "recurring_refresh":
                await self._handle_recurring_refresh_callback(query, context, user)
            else:
                await query.edit_message_text(
                    text="‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"
                )
        except Exception as e:
            logger.error(f"Error in recurring callback: {e}")
            await query.edit_message_text(
                text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞"
            )
    
    async def _handle_recurring_daily_callback(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        message = """
üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è

–°–æ–∑–¥–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:
/daily <–≤—Ä–µ–º—è> <–Ω–∞–∑–≤–∞–Ω–∏–µ> [—Å–æ–æ–±—â–µ–Ω–∏–µ]

–ü—Ä–∏–º–µ—Ä—ã:
‚Ä¢ /daily 09:00 "–£—Ç—Ä–µ–Ω–Ω—è—è –∑–∞—Ä—è–¥–∫–∞"
‚Ä¢ /daily 18:00 "–í–µ—á–µ—Ä–Ω–∏–π –¥–µ—Ç–æ–∫—Å" "–í—Ä–µ–º—è –æ—Ç–ª–æ–∂–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω"
‚Ä¢ /daily 22:00 "–¢–∏—Ö–∏–µ —á–∞—Å—ã" "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ —Å–Ω—É"

–í—Ä–µ–º—è —É–∫–∞–∑—ã–≤–∞–π—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú
        """
        
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="recurring_refresh")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text=message.strip(),
            reply_markup=reply_markup
        )
    
    async def _handle_recurring_weekly_callback(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        message = """
üìÜ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è

–°–æ–∑–¥–∞—Ç—å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:
/weekly <–¥–Ω–∏> <–≤—Ä–µ–º—è> <–Ω–∞–∑–≤–∞–Ω–∏–µ> [—Å–æ–æ–±—â–µ–Ω–∏–µ]

–î–Ω–∏ –Ω–µ–¥–µ–ª–∏: mon,tue,wed,thu,fri,sat,sun
–í—Ä–µ–º—è: –ß–ß:–ú–ú

–ü—Ä–∏–º–µ—Ä—ã:
‚Ä¢ /weekly mon,wed,fri 09:00 "–£—Ç—Ä–µ–Ω–Ω—è—è –∑–∞—Ä—è–¥–∫–∞"
‚Ä¢ /weekly sat,sun 10:00 "–í—ã—Ö–æ–¥–Ω—ã–µ" "–í—Ä–µ–º—è –¥–ª—è —Å–µ–±—è"
‚Ä¢ /weekly mon 18:00 "–ù–∞—á–∞–ª–æ –Ω–µ–¥–µ–ª–∏" "–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"

–î–Ω–∏ —É–∫–∞–∑—ã–≤–∞–π—Ç–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤
        """
        
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="recurring_refresh")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text=message.strip(),
            reply_markup=reply_markup
        )
    
    async def _handle_recurring_settings_callback(self, query, context, user):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        try:
            with SessionLocal() as db:
                recurring_reminders = reminder_crud.get_recurring_reminders(db, user.id)
                
                if not recurring_reminders:
                    message = "‚öôÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
                else:
                    message = "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:\n\n"
                    
                    for reminder in recurring_reminders[:5]:
                        status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–æ" if reminder.is_enabled else "‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
                        message += f"üÜî {reminder.id}: {reminder.title}\n"
                        message += f"   –°—Ç–∞—Ç—É—Å: {status}\n"
                        message += f"   –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {reminder.priority}\n\n"
                    
                    if len(recurring_reminders) > 5:
                        message += f"... –∏ –µ—â–µ {len(recurring_reminders) - 5} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"
                
                keyboard = [
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="recurring_refresh")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.edit_message_text(
                    text=message.strip(),
                    reply_markup=reply_markup
                )
                
        except Exception as e:
            logger.error(f"Error in recurring settings: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
    
    async def _handle_recurring_stats_callback(self, query, context, user):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        try:
            with SessionLocal() as db:
                stats = reminder_crud.get_reminders_stats(db, user.id)
                
                message = f"""
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π

üîÑ –í—Å–µ–≥–æ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è: {stats.get('recurring', 0)}
üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats.get('active', 0)}
‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö: {stats.get('sent', 0)}
‚ùå –û—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö: {stats.get('cancelled', 0)}
‚è∞ –ò—Å—Ç–µ–∫—à–∏—Ö: {stats.get('expired', 0)}
üìÖ –ó–∞ 7 –¥–Ω–µ–π: {stats.get('last_7_days', 0)}
                """
                
                keyboard = [
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="recurring_refresh")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.edit_message_text(
                    text=message.strip(),
                    reply_markup=reply_markup
                )
                
        except Exception as e:
            logger.error(f"Error in recurring stats: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    
    async def _handle_recurring_refresh_callback(self, query, context, user):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        try:
            with SessionLocal() as db:
                recurring_reminders = reminder_crud.get_recurring_reminders(db, user.id)
                
                if not recurring_reminders:
                    message = """
üîÑ –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è

–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.

–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ:
‚Ä¢ /daily - –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
‚Ä¢ /weekly - –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
‚Ä¢ /remind - –±—ã—Å—Ç—Ä–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ–º
                    """
                else:
                    message = f"üîÑ –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ({len(recurring_reminders)}):\n\n"
                    
                    for i, reminder in enumerate(recurring_reminders[:10], 1):
                        status_emoji = "‚úÖ" if reminder.is_enabled else "‚è∏Ô∏è"
                        type_emoji = {
                            "daily": "üìÖ",
                            "weekly": "üìÜ",
                            "custom": "‚öôÔ∏è",
                            "detox_reminder": "üßò",
                            "focus_reminder": "üéØ",
                            "break_reminder": "‚òï",
                            "quiet_hours": "ü§´"
                        }.get(reminder.reminder_type.value, "üîî")
                        
                        message += f"{i}. {status_emoji} {type_emoji} {reminder.title}\n"
                        message += f"   ‚è∞ {reminder.scheduled_time.strftime('%H:%M')}"
                        
                        if reminder.is_recurring and reminder.repeat_interval:
                            message += f" (–∫–∞–∂–¥—ã–µ {reminder.repeat_interval} –º–∏–Ω.)"
                        elif reminder.reminder_type == ReminderType.DAILY:
                            message += " (–µ–∂–µ–¥–Ω–µ–≤–Ω–æ)"
                        elif reminder.reminder_type == ReminderType.WEEKLY:
                            message += " (–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ)"
                        
                        message += "\n\n"
                    
                    if len(recurring_reminders) > 10:
                        message += f"... –∏ –µ—â–µ {len(recurring_reminders) - 10} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"
                
                # –°–æ–∑–¥–∞–µ–º inline –∫–Ω–æ–ø–∫–∏
                keyboard = [
                    [
                        InlineKeyboardButton("üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ", callback_data="recurring_daily"),
                        InlineKeyboardButton("üìÜ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ", callback_data="recurring_weekly")
                    ],
                    [
                        InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="recurring_settings"),
                        InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="recurring_stats")
                    ],
                    [
                        InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="recurring_refresh")
                    ]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.edit_message_text(
                    text=message.strip(),
                    reply_markup=reply_markup
                )
                
        except Exception as e:
            logger.error(f"Error refreshing recurring reminders: {e}")
            await query.edit_message_text(
                text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"
            )
    
    async def _handle_add_time_quick_callback(self, query, context):
        """–ë—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏"""
        message = """
‚è±Ô∏è –ë—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:
/addtime <–º–∏–Ω—É—Ç—ã> <—Ç–∏–ø>

–ü—Ä–∏–º–µ—Ä—ã:
‚Ä¢ /addtime 30 productivity
‚Ä¢ /addtime 60 social
‚Ä¢ /addtime 45 entertainment

–¢–∏–ø—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:
‚Ä¢ productivity - –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è
‚Ä¢ social - —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏
‚Ä¢ entertainment - —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è
‚Ä¢ other - –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è
        """
        
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="analytics_refresh")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text=message.strip(),
            reply_markup=reply_markup
        )

    async def _recurring_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /recurring - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–º–∏—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏"""
        user = await self._authenticate_user(update)
        if not user:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
            return
        
        try:
            with SessionLocal() as db:
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                recurring_reminders = reminder_crud.get_recurring_reminders(db, user.id)
                
                if not recurring_reminders:
                    message = """
üîÑ –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è

–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.

–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ:
‚Ä¢ /daily - –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
‚Ä¢ /weekly - –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
‚Ä¢ /remind - –±—ã—Å—Ç—Ä–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ–º
                    """
                else:
                    message = f"üîÑ –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ({len(recurring_reminders)}):\n\n"
                    
                    for i, reminder in enumerate(recurring_reminders[:10], 1):
                        status_emoji = "‚úÖ" if reminder.is_enabled else "‚è∏Ô∏è"
                        type_emoji = {
                            "daily": "üìÖ",
                            "weekly": "üìÜ",
                            "custom": "‚öôÔ∏è",
                            "detox_reminder": "üßò",
                            "focus_reminder": "üéØ",
                            "break_reminder": "‚òï",
                            "quiet_hours": "ü§´"
                        }.get(reminder.reminder_type.value, "üîî")
                        
                        message += f"{i}. {status_emoji} {type_emoji} {reminder.title}\n"
                        message += f"   ‚è∞ {reminder.scheduled_time.strftime('%H:%M')}"
                        
                        if reminder.is_recurring and reminder.repeat_interval:
                            message += f" (–∫–∞–∂–¥—ã–µ {reminder.repeat_interval} –º–∏–Ω.)"
                        elif reminder.reminder_type == ReminderType.DAILY:
                            message += " (–µ–∂–µ–¥–Ω–µ–≤–Ω–æ)"
                        elif reminder.reminder_type == ReminderType.WEEKLY:
                            message += " (–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ)"
                        
                        message += "\n\n"
                    
                    if len(recurring_reminders) > 10:
                        message += f"... –∏ –µ—â–µ {len(recurring_reminders) - 10} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"
                
                # –°–æ–∑–¥–∞–µ–º inline –∫–Ω–æ–ø–∫–∏
                keyboard = [
                    [
                        InlineKeyboardButton("üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ", callback_data="recurring_daily"),
                        InlineKeyboardButton("üìÜ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ", callback_data="recurring_weekly")
                    ],
                    [
                        InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="recurring_settings"),
                        InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="recurring_stats")
                    ],
                    [
                        InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="recurring_refresh")
                    ]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await update.message.reply_text(
                    text=message.strip(),
                    reply_markup=reply_markup
                )
                
        except Exception as e:
            logger.error(f"Error in recurring command: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")

    async def _daily_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /daily - —Å–æ–∑–¥–∞–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
        user = await self._authenticate_user(update)
        if not user:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        args = context.args
        if len(args) < 2:
            message = """
üìÖ –°–æ–∑–¥–∞–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
/daily <–≤—Ä–µ–º—è> <–Ω–∞–∑–≤–∞–Ω–∏–µ> [—Å–æ–æ–±—â–µ–Ω–∏–µ]

–ü—Ä–∏–º–µ—Ä—ã:
‚Ä¢ /daily 09:00 "–£—Ç—Ä–µ–Ω–Ω—è—è –∑–∞—Ä—è–¥–∫–∞"
‚Ä¢ /daily 18:00 "–í–µ—á–µ—Ä–Ω–∏–π –¥–µ—Ç–æ–∫—Å" "–í—Ä–µ–º—è –æ—Ç–ª–æ–∂–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω"
‚Ä¢ /daily 22:00 "–¢–∏—Ö–∏–µ —á–∞—Å—ã" "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ —Å–Ω—É"

–í—Ä–µ–º—è —É–∫–∞–∑—ã–≤–∞–π—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú
            """
            await update.message.reply_text(message.strip())
            return
        
        try:
            time_str = args[0]
            title = args[1]
            message = " ".join(args[2:]) if len(args) > 2 else None
            
            # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
            from datetime import time
            try:
                hour, minute = map(int, time_str.split(':'))
                reminder_time = time(hour, minute)
            except ValueError:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú")
                return
            
            with SessionLocal() as db:
                # –°–æ–∑–¥–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                reminder = reminder_crud.create_daily_reminder(
                    db=db,
                    user_id=user.id,
                    title=title,
                    message=message,
                    reminder_time=reminder_time
                )
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
                from detoxbuddy.core.reminder_scheduler import add_reminder_to_scheduler
                add_reminder_to_scheduler(reminder)
                
                success_message = f"""
‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!

üìÖ –ù–∞–∑–≤–∞–Ω–∏–µ: {reminder.title}
‚è∞ –í—Ä–µ–º—è: {reminder_time.strftime('%H:%M')}
üÜî ID: {reminder.id}

–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è.
                """
                
                await update.message.reply_text(success_message.strip())
                
        except Exception as e:
            logger.error(f"Error creating daily reminder: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")

    async def _weekly_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /weekly - —Å–æ–∑–¥–∞–Ω–∏–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
        user = await self._authenticate_user(update)
        if not user:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        args = context.args
        if len(args) < 3:
            message = """
üìÜ –°–æ–∑–¥–∞–Ω–∏–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
/weekly <–¥–Ω–∏> <–≤—Ä–µ–º—è> <–Ω–∞–∑–≤–∞–Ω–∏–µ> [—Å–æ–æ–±—â–µ–Ω–∏–µ]

–î–Ω–∏ –Ω–µ–¥–µ–ª–∏: mon,tue,wed,thu,fri,sat,sun
–í—Ä–µ–º—è: –ß–ß:–ú–ú

–ü—Ä–∏–º–µ—Ä—ã:
‚Ä¢ /weekly mon,wed,fri 09:00 "–£—Ç—Ä–µ–Ω–Ω—è—è –∑–∞—Ä—è–¥–∫–∞"
‚Ä¢ /weekly sat,sun 10:00 "–í—ã—Ö–æ–¥–Ω—ã–µ" "–í—Ä–µ–º—è –¥–ª—è —Å–µ–±—è"
‚Ä¢ /weekly mon 18:00 "–ù–∞—á–∞–ª–æ –Ω–µ–¥–µ–ª–∏" "–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"

–î–Ω–∏ —É–∫–∞–∑—ã–≤–∞–π—Ç–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤
            """
            await update.message.reply_text(message.strip())
            return
        
        try:
            days_str = args[0]
            time_str = args[1]
            title = args[2]
            message = " ".join(args[3:]) if len(args) > 3 else None
            
            # –ü–∞—Ä—Å–∏–º –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏
            days_of_week = [day.strip().lower() for day in days_str.split(',')]
            
            # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
            from datetime import time
            try:
                hour, minute = map(int, time_str.split(':'))
                reminder_time = time(hour, minute)
            except ValueError:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú")
                return
            
            with SessionLocal() as db:
                # –°–æ–∑–¥–∞–µ–º –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                reminder = reminder_crud.create_weekly_reminder(
                    db=db,
                    user_id=user.id,
                    title=title,
                    message=message,
                    days_of_week=days_of_week,
                    reminder_time=reminder_time
                )
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
                from detoxbuddy.core.reminder_scheduler import add_reminder_to_scheduler
                add_reminder_to_scheduler(reminder)
                
                days_display = ", ".join(days_of_week).upper()
                success_message = f"""
‚úÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!

üìÜ –ù–∞–∑–≤–∞–Ω–∏–µ: {reminder.title}
üìÖ –î–Ω–∏: {days_display}
‚è∞ –í—Ä–µ–º—è: {reminder_time.strftime('%H:%M')}
üÜî ID: {reminder.id}

–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏.
                """
                
                await update.message.reply_text(success_message.strip())
                
        except Exception as e:
            logger.error(f"Error creating weekly reminder: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")

    async def _handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        chat_id = update.effective_chat.id
        text = update.message.text
        
        # –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å)
        if "–ø—Ä–∏–≤–µ—Ç" in text.lower() or "hello" in text.lower():
            await context.bot.send_message(
                chat_id=chat_id,
                text="–ü—Ä–∏–≤–µ—Ç! üëã –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏."
            )
        else:
            await context.bot.send_message(
                chat_id=chat_id,
                text="–Ø –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏."
            )

    # –ú–µ—Ç–æ–¥—ã –¥–ª—è –ø—Ä—è–º–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞)
    
    async def get_me(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ"""
        if not self.application or not self.application.bot:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            from telegram import Bot
            temp_bot = Bot(token=self.token)
            async with temp_bot:
                return await temp_bot.get_me()
        return await self.application.bot.get_me()
    
    async def send_message(self, chat_id: int, text: str, parse_mode: str = None, **kwargs):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Ç —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—Ç–∞—Ç—É—Å–∞ —á–∞—Ç–∞"""
        try:
            if not self.application or not self.application.bot:
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
                from telegram import Bot
                temp_bot = Bot(token=self.token)
                async with temp_bot:
                    return await temp_bot.send_message(
                        chat_id=chat_id,
                        text=text,
                        parse_mode=parse_mode,
                        **kwargs
                    )
            return await self.application.bot.send_message(
                chat_id=chat_id,
                text=text,
                parse_mode=parse_mode,
                **kwargs
            )
        except Exception as e:
            error_msg = str(e).lower()
            if "chat not found" in error_msg or "bot was blocked" in error_msg:
                logger.warning(f"User {chat_id} blocked bot or chat not found: {e}")
                # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                return None
            elif "forbidden" in error_msg:
                logger.warning(f"Bot forbidden to send message to user {chat_id}: {e}")
                return None
            else:
                logger.error(f"Error sending message to user {chat_id}: {e}")
                raise

    # –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–∞–π–º–µ—Ä–æ–º —Ñ–æ–∫—É—Å–∞
    
    async def _show_focus_session_menu(self, update: Update):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–∏ —Ñ–æ–∫—É—Å–∞"""
        keyboard = [
            [
                InlineKeyboardButton("üçÖ 25 –º–∏–Ω (—Å—Ç–∞–Ω–¥–∞—Ä—Ç)", callback_data="focus_25"),
                InlineKeyboardButton("‚è∞ 15 –º–∏–Ω (–∫–æ—Ä–æ—Ç–∫–∞—è)", callback_data="focus_15")
            ],
            [
                InlineKeyboardButton("‚è±Ô∏è 45 –º–∏–Ω (–¥–ª–∏–Ω–Ω–∞—è)", callback_data="focus_45"),
                InlineKeyboardButton("üéØ 60 –º–∏–Ω (–º–∞—Ä–∞—Ñ–æ–Ω)", callback_data="focus_60")
            ],
            [
                InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="focus_stats"),
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="focus_cancel")
            ]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message = """
üçÖ **–¢–∞–π–º–µ—Ä —Ñ–æ–∫—É—Å–∞ (Pomodoro)**

–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏:

‚Ä¢ **25 –º–∏–Ω—É—Ç** - –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è —Ç–µ—Ö–Ω–∏–∫–∞ Pomodoro
‚Ä¢ **15 –º–∏–Ω—É—Ç** - –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –∑–∞–¥–∞—á
‚Ä¢ **45 –º–∏–Ω—É—Ç** - –¥–ª—è –≥–ª—É–±–æ–∫–æ–π —Ä–∞–±–æ—Ç—ã
‚Ä¢ **60 –º–∏–Ω—É—Ç** - –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤

–ü–æ—Å–ª–µ —Å–µ—Å—Å–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—á–Ω–µ—Ç—Å—è –ø–µ—Ä–µ—Ä—ã–≤!
        """
        
        await update.message.reply_text(
            message.strip(),
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
    
    async def _show_active_session_controls(self, update: Update, session_info: dict):
        """–ü–æ–∫–∞–∑–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–µ–π"""
        session_type = session_info.get("session_type", "focus")
        duration = session_info.get("duration_minutes", 25)
        
        if session_type == "focus":
            title = "üçÖ –ê–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è —Ñ–æ–∫—É—Å–∞"
            status_emoji = "‚è±Ô∏è"
        elif session_type == "short_break":
            title = "‚òï –ö–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä–µ—Ä—ã–≤"
            status_emoji = "‚òï"
        else:
            title = "üå¥ –î–ª–∏–Ω–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤"
            status_emoji = "üå¥"
        
        keyboard = [
            [
                InlineKeyboardButton("‚è∏Ô∏è –ü–∞—É–∑–∞", callback_data="focus_pause"),
                InlineKeyboardButton("‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="focus_resume")
            ],
            [
                InlineKeyboardButton("‚èπÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="focus_complete"),
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="focus_cancel")
            ]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message = f"""
{title}

{status_emoji} –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} –º–∏–Ω—É—Ç
‚è∞ –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–Ω–∞

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
        """
        
        await update.message.reply_text(
            message.strip(),
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
    
    async def _handle_focus_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ç–∞–π–º–µ—Ä–∞ —Ñ–æ–∫—É—Å–∞"""
        query = update.callback_query
        await query.answer()
        
        # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await self._authenticate_user(update)
        if not user:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
            return
        
        data = query.data
        user_id = user.id
        
        try:
            if data.startswith("focus_"):
                action = data.split("_")[1]
                
                if action.isdigit():
                    # –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
                    duration = int(action)
                    await self._start_focus_session(query, user_id, duration)
                    
                elif action == "pause":
                    # –ü–∞—É–∑–∞ —Å–µ—Å—Å–∏–∏
                    await self._pause_focus_session(query, user_id)
                    
                elif action == "resume":
                    # –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
                    await self._resume_focus_session(query, user_id)
                    
                elif action == "complete":
                    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
                    await self._complete_focus_session(query, user_id)
                    
                elif action == "cancel":
                    # –û—Ç–º–µ–Ω–∞ —Å–µ—Å—Å–∏–∏
                    await self._cancel_focus_session(query, user_id)
                    
                elif action == "stats":
                    # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    await self._show_focus_stats(query, user_id)
                    
        except Exception as e:
            logger.error(f"Error handling focus callback: {e}")
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
    
    async def _start_focus_session(self, query, user_id: int, duration: int):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Å—Å–∏—é —Ñ–æ–∫—É—Å–∞"""
        if not self.focus_timer:
            await query.edit_message_text("‚ùå –¢–∞–π–º–µ—Ä —Ñ–æ–∫—É—Å–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        session = self.focus_timer.start_focus_session(user_id, duration)
        if session:
            message = f"""
üçÖ **–°–µ—Å—Å–∏—è —Ñ–æ–∫—É—Å–∞ –∑–∞–ø—É—â–µ–Ω–∞!**

‚è∞ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} –º–∏–Ω—É—Ç
üìÖ –ù–∞—á–∞–ª–æ: {session.actual_start.strftime('%H:%M')}
üïê –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ: {(session.actual_start + timedelta(minutes=duration)).strftime('%H:%M')}

–°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ –∑–∞–¥–∞—á–µ! üí™
            """
            
            keyboard = [
                [
                    InlineKeyboardButton("‚è∏Ô∏è –ü–∞—É–∑–∞", callback_data="focus_pause"),
                    InlineKeyboardButton("‚èπÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="focus_complete")
                ],
                [
                    InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="focus_cancel")
                ]
            ]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                message.strip(),
                reply_markup=reply_markup,
                parse_mode="Markdown"
            )
        else:
            await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Å—Å–∏—é —Ñ–æ–∫—É—Å–∞")
    
    async def _pause_focus_session(self, query, user_id: int):
        """–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é —Ñ–æ–∫—É—Å–∞"""
        if not self.focus_timer:
            await query.edit_message_text("‚ùå –¢–∞–π–º–µ—Ä —Ñ–æ–∫—É—Å–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        success = self.focus_timer.pause_session(user_id)
        if success:
            message = """
‚è∏Ô∏è **–°–µ—Å—Å–∏—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞**

–í—Ä–µ–º—è –ø–∞—É–∑—ã –Ω–µ –∑–∞—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –≤ –æ–±—â—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å.
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å" –¥–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
            """
            
            keyboard = [
                [
                    InlineKeyboardButton("‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="focus_resume"),
                    InlineKeyboardButton("‚èπÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="focus_complete")
                ],
                [
                    InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="focus_cancel")
                ]
            ]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                message.strip(),
                reply_markup=reply_markup,
                parse_mode="Markdown"
            )
        else:
            await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é")
    
    async def _resume_focus_session(self, query, user_id: int):
        """–í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é —Ñ–æ–∫—É—Å–∞"""
        if not self.focus_timer:
            await query.edit_message_text("‚ùå –¢–∞–π–º–µ—Ä —Ñ–æ–∫—É—Å–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        success = self.focus_timer.resume_session(user_id)
        if success:
            message = """
‚ñ∂Ô∏è **–°–µ—Å—Å–∏—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞**

–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ä–∞–±–æ—Ç—É! –¢–∞–π–º–µ—Ä —Å–Ω–æ–≤–∞ –∞–∫—Ç–∏–≤–µ–Ω.
            """
            
            keyboard = [
                [
                    InlineKeyboardButton("‚è∏Ô∏è –ü–∞—É–∑–∞", callback_data="focus_pause"),
                    InlineKeyboardButton("‚èπÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="focus_complete")
                ],
                [
                    InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="focus_cancel")
                ]
            ]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                message.strip(),
                reply_markup=reply_markup,
                parse_mode="Markdown"
            )
        else:
            await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é")
    
    async def _complete_focus_session(self, query, user_id: int):
        """–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é —Ñ–æ–∫—É—Å–∞"""
        if not self.focus_timer:
            await query.edit_message_text("‚ùå –¢–∞–π–º–µ—Ä —Ñ–æ–∫—É—Å–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        success = self.focus_timer.cancel_session(user_id)
        if success:
            message = """
‚úÖ **–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–æ—Å—Ä–æ—á–Ω–æ**

–•–æ—Ä–æ—à–∞—è —Ä–∞–±–æ—Ç–∞! –î–∞–∂–µ —á–∞—Å—Ç–∏—á–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è - —ç—Ç–æ –ø—Ä–æ–≥—Ä–µ—Å—Å.
            """
            
            await query.edit_message_text(
                message.strip(),
                parse_mode="Markdown"
            )
        else:
            await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é")
    
    async def _cancel_focus_session(self, query, user_id: int):
        """–û—Ç–º–µ–Ω–∏—Ç—å —Å–µ—Å—Å–∏—é —Ñ–æ–∫—É—Å–∞"""
        if not self.focus_timer:
            await query.edit_message_text("‚ùå –¢–∞–π–º–µ—Ä —Ñ–æ–∫—É—Å–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        success = self.focus_timer.cancel_session(user_id)
        if success:
            message = """
‚ùå **–°–µ—Å—Å–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞**

–ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ—Å—å! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã.
            """
            
            await query.edit_message_text(
                message.strip(),
                parse_mode="Markdown"
            )
        else:
            await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å —Å–µ—Å—Å–∏—é")
    
    async def _show_focus_stats(self, query, user_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ñ–æ–∫—É—Å–∞"""
        try:
            from detoxbuddy.database.database import SessionLocal
            from detoxbuddy.database.crud.focus_session import focus_session
            
            with SessionLocal() as db:
                stats = focus_session.get_user_stats(db, user_id, days=7)
                streak = focus_session.get_streak_days(db, user_id)
            
            message = f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–æ–∫—É—Å–∞ (7 –¥–Ω–µ–π)**

üçÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π: {stats['total_sessions']}
‚è∞ –û–±—â–µ–µ –≤—Ä–µ–º—è —Ñ–æ–∫—É—Å–∞: {stats['total_focus_time_minutes']} –º–∏–Ω
‚òï –ü–µ—Ä–µ—Ä—ã–≤–æ–≤: {stats['total_breaks']}
üìà –°—Ä–µ–¥–Ω–∏–π % –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {stats['avg_completion_rate']}%
üî• –°–µ—Ä–∏—è –¥–Ω–µ–π: {streak} –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥

–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! üí™
            """
            
            keyboard = [
                [
                    InlineKeyboardButton("üçÖ –ù–∞—á–∞—Ç—å —Å–µ—Å—Å–∏—é", callback_data="focus_25"),
                    InlineKeyboardButton("üìä –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data="focus_detailed_stats")
                ],
                [
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="focus_back")
                ]
            ]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                message.strip(),
                reply_markup=reply_markup,
                parse_mode="Markdown"
            )
            
        except Exception as e:
            logger.error(f"Error showing focus stats: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

    # –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏
    async def _achievements_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /achievements"""
        user = await self._authenticate_user(update)
        if not user:
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.")
            return
        
        try:
            from detoxbuddy.database.database import SessionLocal
            
            with SessionLocal() as db:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                all_achievements = achievement_service.achievement_crud.get_all_active(db)
                if not all_achievements:
                    await update.message.reply_text("‚ùå –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
                    return
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                completed_achievements = achievement_service.check_all_achievements(db, user.id)
                
                # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                user_achievements = user_achievement_crud.get_user_achievements(db, user.id)
                completed_achievements = user_achievement_crud.get_completed_achievements(db, user.id)
                recent_achievements = user_achievement_crud.get_recent_achievements(db, user.id, days=7)
                
                # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_level = user_level_crud.get_user_level(db, user.id)
                if not user_level:
                    user_level = user_level_crud.create_user_level(db, user.id)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                message = f"""
üèÜ **–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è {user.full_name}**

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {len(completed_achievements)} –∏–∑ {len(all_achievements)}
‚Ä¢ –£—Ä–æ–≤–µ–Ω—å: {user_level.level}
‚Ä¢ –û–ø—ã—Ç: {user_level.experience}/{user_level.experience_to_next_level} XP
‚Ä¢ –°–µ—Ä–∏—è –¥–Ω–µ–π: {user_level.streak_days} –¥–Ω–µ–π

üéØ **–ù–µ–¥–∞–≤–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:**
"""
                
                if recent_achievements:
                    for ua in recent_achievements[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ 3 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö
                        achievement = ua.achievement
                        message += f"‚Ä¢ {achievement.badge_icon} {achievement.name}\n"
                else:
                    message += "–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å! üí™\n"
                
                message += "\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
                
                # –°–æ–∑–¥–∞–µ–º inline –∫–Ω–æ–ø–∫–∏
                keyboard = [
                    [
                        InlineKeyboardButton("üìã –í—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è", callback_data="achievements_all"),
                        InlineKeyboardButton("üéØ –ü—Ä–æ–≥—Ä–µ—Å—Å", callback_data="achievements_progress")
                    ],
                    [
                        InlineKeyboardButton("üèÖ –ù–µ–¥–∞–≤–Ω–∏–µ", callback_data="achievements_recent"),
                        InlineKeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="achievements_stats")
                    ],
                    [
                        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
                    ]
                ]
                
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await update.message.reply_text(
                    message.strip(),
                    reply_markup=reply_markup,
                    parse_mode="Markdown"
                )
                
        except Exception as e:
            logger.error(f"Error in achievements command: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π")

    async def _level_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /level"""
        user = await self._authenticate_user(update)
        if not user:
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.")
            return
        
        try:
            from detoxbuddy.database.database import SessionLocal
            
            with SessionLocal() as db:
                # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_level = user_level_crud.get_user_level(db, user.id)
                if not user_level:
                    user_level = user_level_crud.create_user_level(db, user.id)
                
                # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
                progress = user_level.progress_to_next_level
                progress_bar_length = 10
                filled_length = int(progress * progress_bar_length)
                progress_bar = "‚ñà" * filled_length + "‚ñë" * (progress_bar_length - filled_length)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                message = f"""
üìä **–£—Ä–æ–≤–µ–Ω—å –∏ –æ–ø—ã—Ç**

üë§ **{user.full_name}**
üèÜ –£—Ä–æ–≤–µ–Ω—å: {user_level.level}
‚≠ê –û–ø—ã—Ç: {user_level.experience}/{user_level.experience_to_next_level} XP
üìà –û–±—â–∏–π –æ–ø—ã—Ç: {user_level.total_experience} XP
üî• –°–µ—Ä–∏—è –¥–Ω–µ–π: {user_level.streak_days} –¥–Ω–µ–π
üèÖ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–π: {user_level.achievements_count}

üìä **–ü—Ä–æ–≥—Ä–µ—Å—Å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è:**
{progress_bar} {progress:.1%}

"""
                
                # –î–æ–±–∞–≤–ª—è–µ–º –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                if progress >= 0.8:
                    message += "üéâ –ü–æ—á—Ç–∏ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!"
                elif progress >= 0.5:
                    message += "üí™ –û—Ç–ª–∏—á–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å! –í—ã –Ω–∞ –ø–æ–ª–ø—É—Ç–∏ –∫ –Ω–æ–≤–æ–º—É —É—Ä–æ–≤–Ω—é!"
                else:
                    message += "üöÄ –ù–∞—á–∏–Ω–∞–π—Ç–µ —Å–≤–æ–π –ø—É—Ç—å –∫ –Ω–æ–≤–æ–º—É —É—Ä–æ–≤–Ω—é!"
                
                # –°–æ–∑–¥–∞–µ–º inline –∫–Ω–æ–ø–∫–∏
                keyboard = [
                    [
                        InlineKeyboardButton("üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è", callback_data="achievements_all"),
                        InlineKeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="level_stats")
                    ],
                    [
                        InlineKeyboardButton("üéØ –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –æ–ø—ã—Ç", callback_data="level_help"),
                        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
                    ]
                ]
                
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await update.message.reply_text(
                    message.strip(),
                    reply_markup=reply_markup,
                    parse_mode="Markdown"
                )
                
        except Exception as e:
            logger.error(f"Error in level command: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è")

    async def _profile_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /profile"""
        user = await self._authenticate_user(update)
        if not user:
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.")
            return
        
        try:
            from detoxbuddy.database.database import SessionLocal
            from detoxbuddy.database.crud.focus_session import focus_session
            from detoxbuddy.database.crud.screen_time import screen_time_crud
            
            with SessionLocal() as db:
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_level = user_level_crud.get_user_level(db, user.id)
                if not user_level:
                    user_level = user_level_crud.create_user_level(db, user.id)
                
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                focus_stats = focus_session.get_user_stats(db, user.id, days=30)
                screen_time_stats = screen_time_crud.get_user_stats(db, user.id, days=30)
                completed_achievements = user_achievement_crud.get_completed_achievements(db, user.id)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                message = f"""
üë§ **–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**

**–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
‚Ä¢ –ò–º—è: {user.full_name}
‚Ä¢ –°—Ç–∞—Ç—É—Å: {'üåü –ü—Ä–µ–º–∏—É–º' if user.is_premium else 'üë§ –û–±—ã—á–Ω—ã–π'}
‚Ä¢ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.created_at.strftime('%d.%m.%Y')}
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user.last_activity.strftime('%d.%m.%Y %H:%M') if user.last_activity else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}

**–£—Ä–æ–≤–µ–Ω—å –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å:**
‚Ä¢ –£—Ä–æ–≤–µ–Ω—å: {user_level.level}
‚Ä¢ –û–ø—ã—Ç: {user_level.experience}/{user_level.experience_to_next_level} XP
‚Ä¢ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–π: {len(completed_achievements)}
‚Ä¢ –°–µ—Ä–∏—è –¥–Ω–µ–π: {user_level.streak_days} –¥–Ω–µ–π

**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 30 –¥–Ω–µ–π:**
‚Ä¢ –°–µ—Å—Å–∏–π —Ñ–æ–∫—É—Å–∞: {focus_stats['total_sessions']}
‚Ä¢ –í—Ä–µ–º—è —Ñ–æ–∫—É—Å–∞: {focus_stats['total_focus_time_minutes']} –º–∏–Ω
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ —ç–∫—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è: {screen_time_stats.get('avg_duration_minutes', 0):.1f} –º–∏–Ω/–¥–µ–Ω—å

**–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:**
‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {len(completed_achievements)} –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–µ–µ: {completed_achievements[0].achievement.name if completed_achievements else '–ù–µ—Ç'}
"""
                
                # –°–æ–∑–¥–∞–µ–º inline –∫–Ω–æ–ø–∫–∏
                keyboard = [
                    [
                        InlineKeyboardButton("üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è", callback_data="achievements_all"),
                        InlineKeyboardButton("üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="analytics_main")
                    ],
                    [
                        InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings_main"),
                        InlineKeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="profile_stats")
                    ],
                    [
                        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
                    ]
                ]
                
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await update.message.reply_text(
                    message.strip(),
                    reply_markup=reply_markup,
                    parse_mode="Markdown"
                )
                
        except Exception as e:
            logger.error(f"Error in profile command: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è")

    async def _handle_achievement_callback(self, query, user_id: int, action: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
        try:
            from detoxbuddy.database.database import SessionLocal
            
            with SessionLocal() as db:
                if action == "all":
                    await self._show_all_achievements(query, user_id, db)
                elif action == "progress":
                    await self._show_achievement_progress(query, user_id, db)
                elif action == "recent":
                    await self._show_recent_achievements(query, user_id, db)
                elif action == "stats":
                    await self._show_achievement_stats(query, user_id, db)
                else:
                    await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
                    
        except Exception as e:
            logger.error(f"Error in achievement callback: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")

    def _format_achievement_progress(self, ua, achievement):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –ø–µ—Ä–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        if ua.is_completed:
            if ua.current_progress > achievement.condition_value:
                # –ü–µ—Ä–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–æ
                overachievement = ua.current_progress - achievement.condition_value
                overachievement_percent = (ua.current_progress / achievement.condition_value) * 100
                return f"‚úÖ {achievement.badge_icon} {achievement.name} ({ua.current_progress}/{achievement.condition_value} +{overachievement})"
            else:
                # –í—ã–ø–æ–ª–Ω–µ–Ω–æ —Ç–æ—á–Ω–æ
                return f"‚úÖ {achievement.badge_icon} {achievement.name} ({ua.current_progress}/{achievement.condition_value})"
        else:
            # –í –ø—Ä–æ—Ü–µ—Å—Å–µ
            progress_percent = (ua.current_progress / achievement.condition_value) * 100
            return f"‚è≥ {achievement.badge_icon} {achievement.name} ({ua.current_progress}/{achievement.condition_value})"

    async def _show_all_achievements(self, query, user_id: int, db):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_achievements = user_achievement_crud.get_user_achievements(db, user_id)
        completed_achievements = user_achievement_crud.get_completed_achievements(db, user_id)
        
        message = f"""
üèÜ **–í—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è**

üìä **–ü—Ä–æ–≥—Ä–µ—Å—Å:** {len(completed_achievements)}/{len(user_achievements)} –∑–∞–≤–µ—Ä—à–µ–Ω–æ

"""
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ —Ç–∏–ø–∞–º
        achievement_types = {}
        for ua in user_achievements:
            achievement = ua.achievement
            if achievement.type.value not in achievement_types:
                achievement_types[achievement.type.value] = []
            achievement_types[achievement.type.value].append(ua)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ —Ç–∏–ø–∞–º
        for type_name, achievements in achievement_types.items():
            type_emoji = {
                "focus_sessions": "üéØ",
                "screen_time_reduction": "üì±", 
                "streak_days": "üìÖ",
                "reminders_completed": "‚è∞",
                "first_time": "üëã",
                "milestone": "üèÖ"
            }.get(type_name, "üìã")
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
            type_display_name = {
                "focus_sessions": "Focus Sessions",
                "screen_time_reduction": "Screen Time Reduction", 
                "streak_days": "Streak Days",
                "reminders_completed": "Reminders Completed",
                "first_time": "First Time",
                "milestone": "Milestone"
            }.get(type_name, type_name.replace('_', ' ').title())
            
            message += f"\n{type_emoji} **{type_display_name}:**\n"
            
            for ua in achievements:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
                achievement = ua.achievement
                formatted_progress = self._format_achievement_progress(ua, achievement)
                message += f"‚Ä¢ {formatted_progress}\n"
        
        keyboard = [
            [
                InlineKeyboardButton("üéØ –ü—Ä–æ–≥—Ä–µ—Å—Å", callback_data="achievements_progress"),
                InlineKeyboardButton("üèÖ –ù–µ–¥–∞–≤–Ω–∏–µ", callback_data="achievements_recent")
            ],
            [
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="achievements_main")
            ]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            message.strip(),
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )

    async def _show_achievement_progress(self, query, user_id: int, db):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º"""
        user_achievements = user_achievement_crud.get_user_achievements(db, user_id)
        
        message = """
üéØ **–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º**

"""
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–ª–∏–∂–∞–π—à–∏–µ –∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        in_progress = [ua for ua in user_achievements if not ua.is_completed]
        in_progress.sort(key=lambda x: x.achievement.condition_value - x.current_progress)
        
        if in_progress:
            message += "**–ë–ª–∏–∂–∞–π—à–∏–µ –∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é:**\n\n"
            for ua in in_progress[:5]:
                achievement = ua.achievement
                progress_percent = (ua.current_progress / achievement.condition_value) * 100
                progress_bar_length = 10
                filled_length = int((ua.current_progress / achievement.condition_value) * progress_bar_length)
                progress_bar = "‚ñà" * filled_length + "‚ñë" * (progress_bar_length - filled_length)
                
                message += f"{achievement.badge_icon} **{achievement.name}**\n"
                message += f"‚îî {progress_bar} {progress_percent:.1f}% ({ua.current_progress}/{achievement.condition_value})\n\n"
        else:
            message += "üéâ –í—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω—ã! –í—ã –º–æ–ª–æ–¥–µ—Ü!\n\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        overachieved = [ua for ua in user_achievements if ua.is_completed and ua.current_progress > ua.achievement.condition_value]
        if overachieved:
            message += "**üèÜ –ü–µ—Ä–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:**\n\n"
            for ua in overachieved[:3]:
                achievement = ua.achievement
                overachievement = ua.current_progress - achievement.condition_value
                overachievement_percent = (ua.current_progress / achievement.condition_value) * 100
                message += f"‚úÖ {achievement.badge_icon} **{achievement.name}**\n"
                message += f"‚îî {ua.current_progress}/{achievement.condition_value} (+{overachievement}, {overachievement_percent:.0f}%)\n\n"
        
        keyboard = [
            [
                InlineKeyboardButton("üèÜ –í—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è", callback_data="achievements_all"),
                InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="achievements_stats")
            ],
            [
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="achievements_main")
            ]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            message.strip(),
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )

    async def _show_recent_achievements(self, query, user_id: int, db):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–µ–¥–∞–≤–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"""
        recent_achievements = user_achievement_crud.get_recent_achievements(db, user_id, days=30)
        
        message = """
üèÖ **–ù–µ–¥–∞–≤–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è**

"""
        
        if recent_achievements:
            for ua in recent_achievements[:10]:
                achievement = ua.achievement
                date_str = ua.completed_at.strftime('%d.%m.%Y')
                message += f"‚Ä¢ {achievement.badge_icon} **{achievement.name}** ({date_str})\n"
                message += f"  ‚îî {achievement.description}\n\n"
        else:
            message += "–ü–æ–∫–∞ –Ω–µ—Ç –Ω–µ–¥–∞–≤–Ω–∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å! üí™\n\n"
        
        keyboard = [
            [
                InlineKeyboardButton("üèÜ –í—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è", callback_data="achievements_all"),
                InlineKeyboardButton("üéØ –ü—Ä–æ–≥—Ä–µ—Å—Å", callback_data="achievements_progress")
            ],
            [
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="achievements_main")
            ]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            message.strip(),
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )

    async def _show_achievement_stats(self, query, user_id: int, db):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
        user_achievements = user_achievement_crud.get_user_achievements(db, user_id)
        completed_achievements = user_achievement_crud.get_completed_achievements(db, user_id)
        user_level = user_level_crud.get_user_level(db, user_id)
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º
        type_stats = {}
        for ua in user_achievements:
            type_name = ua.achievement.type.value
            if type_name not in type_stats:
                type_stats[type_name] = {"total": 0, "completed": 0}
            type_stats[type_name]["total"] += 1
            if ua.is_completed:
                type_stats[type_name]["completed"] += 1
        
        message = f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π**

**–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –í—Å–µ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: {len(user_achievements)}
‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {len(completed_achievements)}
                ‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {f"{(len(completed_achievements) / len(user_achievements) * 100):.1f}%" if len(user_achievements) > 0 else "0%"}
‚Ä¢ –£—Ä–æ–≤–µ–Ω—å: {user_level.level if user_level else 1}
‚Ä¢ –û–±—â–∏–π –æ–ø—ã—Ç: {user_level.total_experience if user_level else 0} XP

**–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:**
"""
        
        type_names = {
            "focus_sessions": "üéØ –°–µ—Å—Å–∏–∏ —Ñ–æ–∫—É—Å–∞",
            "screen_time_reduction": "üì± –°–æ–∫—Ä–∞—â–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏",
            "streak_days": "üìÖ –°–µ—Ä–∏–∏ –¥–Ω–µ–π",
            "reminders_completed": "‚è∞ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è",
            "first_time": "üëã –ü–µ—Ä–≤—ã–µ —à–∞–≥–∏",
            "milestone": "üèÖ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è"
        }
        
        for type_name, stats in type_stats.items():
            display_name = type_names.get(type_name, type_name.replace('_', ' ').title())
            completion_rate = (stats["completed"] / stats["total"] * 100) if stats["total"] > 0 else 0
            message += f"‚Ä¢ {display_name}: {stats['completed']}/{stats['total']} ({completion_rate:.1f}%)\n"
        
        keyboard = [
            [
                InlineKeyboardButton("üèÜ –í—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è", callback_data="achievements_all"),
                InlineKeyboardButton("üéØ –ü—Ä–æ–≥—Ä–µ—Å—Å", callback_data="achievements_progress")
            ],
            [
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="achievements_main")
            ]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            message.strip(),
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )

    async def _handle_level_callback(self, query, user_id: int, action: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —É—Ä–æ–≤–Ω—è"""
        try:
            from detoxbuddy.database.database import SessionLocal
            
            with SessionLocal() as db:
                if action == "stats":
                    await self._show_level_stats(query, user_id, db)
                elif action == "help":
                    await self._show_level_help(query)
                else:
                    await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
                    
        except Exception as e:
            logger.error(f"Error in level callback: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")

    async def _show_level_stats(self, query, user_id: int, db):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É—Ä–æ–≤–Ω—è"""
        user_level = user_level_crud.get_user_level(db, user_id)
        if not user_level:
            user_level = user_level_crud.create_user_level(db, user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º
        completed_achievements = user_achievement_crud.get_completed_achievements(db, user_id)
        
        message = f"""
üìà **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Ä–æ–≤–Ω—è**

**–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å:**
‚Ä¢ –£—Ä–æ–≤–µ–Ω—å: {user_level.level}
‚Ä¢ –û–ø—ã—Ç: {user_level.experience}/{user_level.experience_to_next_level} XP
‚Ä¢ –û–±—â–∏–π –æ–ø—ã—Ç: {user_level.total_experience} XP
‚Ä¢ –ü—Ä–æ–≥—Ä–µ—Å—Å: {user_level.progress_to_next_level:.1%}

**–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:**
‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {len(completed_achievements)} –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
‚Ä¢ –°–µ—Ä–∏—è –¥–Ω–µ–π: {user_level.streak_days} –¥–Ω–µ–π
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–µ—Ä–∏—è: {user_level.max_streak_days} –¥–Ω–µ–π

**–°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å:**
‚Ä¢ –¢—Ä–µ–±—É–µ—Ç—Å—è: {user_level.experience_to_next_level} XP
‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å: {user_level.experience_to_next_level - user_level.experience} XP
        """
        
        keyboard = [
            [
                InlineKeyboardButton("üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è", callback_data="achievements_all"),
                InlineKeyboardButton("üéØ –ü—Ä–æ–≥—Ä–µ—Å—Å", callback_data="achievements_progress")
            ],
            [
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="level_main")
            ]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            message.strip(),
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )

    async def _show_level_help(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –ø–æ–ª—É—á–µ–Ω–∏—é –æ–ø—ã—Ç–∞"""
        message = """
üéØ **–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –æ–ø—ã—Ç**

**–û—Å–Ω–æ–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã:**

üéØ **–°–µ—Å—Å–∏–∏ —Ñ–æ–∫—É—Å–∞:**
‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏: +10 XP
‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–∞—è —Å–µ—Å—Å–∏—è (45+ –º–∏–Ω): +15 XP
‚Ä¢ –°–µ—Ä–∏—è —Å–µ—Å—Å–∏–π: +5 XP –∑–∞ –∫–∞–∂–¥—É—é

üì± **–°–æ–∫—Ä–∞—â–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏:**
‚Ä¢ –î–µ–Ω—å —Å —ç–∫—Ä–∞–Ω–æ–º < 6 —á–∞—Å–æ–≤: +20 XP
‚Ä¢ –î–µ–Ω—å —Å —ç–∫—Ä–∞–Ω–æ–º < 4 —á–∞—Å–æ–≤: +30 XP
‚Ä¢ –ù–µ–¥–µ–ª—è —Å —ç–∫—Ä–∞–Ω–æ–º < 6 —á–∞—Å–æ–≤: +100 XP

üìÖ **–°–µ—Ä–∏–∏ –¥–Ω–µ–π:**
‚Ä¢ 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥: +50 XP
‚Ä¢ 30 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥: +200 XP
‚Ä¢ 100 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥: +1000 XP

‚è∞ **–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:**
‚Ä¢ –ö–∞–∂–¥–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: +5 XP
‚Ä¢ –°–µ—Ä–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: +10 XP

üèÜ **–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:**
‚Ä¢ –ö–∞–∂–¥–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: +10-500 XP
‚Ä¢ –†–µ–¥–∫–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è: +1000 XP

**–°–æ–≤–µ—Ç—ã:**
‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å –≤–∞–∂–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
‚Ä¢ –ú–∞–ª–µ–Ω—å–∫–∏–µ —à–∞–≥–∏ –ø—Ä–∏–≤–æ–¥—è—Ç –∫ –±–æ–ª—å—à–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å
        """
        
        keyboard = [
            [
                InlineKeyboardButton("üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è", callback_data="achievements_all"),
                InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="level_stats")
            ],
            [
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="level_main")
            ]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            message.strip(),
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )

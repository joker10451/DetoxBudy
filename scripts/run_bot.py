#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–æ–ª—å–∫–æ Telegram –±–æ—Ç–∞
"""

import asyncio
import logging
import os
import sys
import atexit
from app.bot.telegram_bot import TelegramBot
from app.config import settings
import structlog

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

logger = structlog.get_logger()


def create_lock_file():
    """–°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–ø—É—Å–∫–æ–≤"""
    lock_file = "bot.lock"
    
    if os.path.exists(lock_file):
        print("‚ùå –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω! –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.")
        print("üí° –ï—Å–ª–∏ –±–æ—Ç –±—ã–ª –∑–∞–≤–µ—Ä—à–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, —É–¥–∞–ª–∏—Ç–µ —Ñ–∞–π–ª 'bot.lock'")
        sys.exit(1)
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    with open(lock_file, "w") as f:
        f.write(str(os.getpid()))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
    atexit.register(remove_lock_file)
    print("üîí –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏")


def remove_lock_file():
    """–£–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
    lock_file = "bot.lock"
    if os.path.exists(lock_file):
        os.remove(lock_file)
        print("üîì –§–∞–π–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —É–¥–∞–ª–µ–Ω")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    create_lock_file()
    
    if not settings.telegram_bot_token:
        logger.error("Telegram bot token not configured!")
        return
    
    bot = TelegramBot()
    
    try:
        logger.info("Starting Telegram bot...")
        await bot.start()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º polling
        logger.info("Starting polling...")
        await bot.run_polling()
        
    except KeyboardInterrupt:
        logger.info("Stopping bot...")
        await bot.stop()
    except Exception as e:
        logger.error(f"Error: {e}")
        await bot.stop()
    finally:
        remove_lock_file()


if __name__ == "__main__":
    asyncio.run(main())
